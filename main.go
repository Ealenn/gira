package main

import (
	CMD "gira/cmd"
	"gira/configuration"
	Services "gira/services"

	"github.com/spf13/cobra"
)

func main() {
	logger := Services.NewLoggerService(Services.INFO)
	configuration := configuration.New()

	rootCmd := &cobra.Command{
		Use:     "gira",
		Version: configuration.GetVersion(false),
	}

	/* ----------------------
	 * Branch
	 * ----------------------
	 */
	var branchCommandAssignIssueFlag bool
	var branchCommand = &cobra.Command{
		Use:   "branch [Jira Issue ID]",
		Short: "Create a new Git branch using Jira issue ID",
		Long: `
Creates a new Git branch based on Jira issue.
The branch name is generated by combining the Jira issue ID with a slugified version of the issue summary (e.g., "feature/ABC-123/fix-login-bug"). 
This helps enforce consistent naming conventions and improve traceability between code and Jira issues.`,
		Example: "  gira branch ISSUE-123\n  gira branch -a ISSUE-123",
		Aliases: []string{"checkout"},
		Args:    cobra.MinimumNArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			CMD.CmdBranch(configuration, logger, args[0], branchCommandAssignIssueFlag)
		},
	}
	branchCommand.Flags().BoolVarP(&branchCommandAssignIssueFlag, "assignIssue", "a", false, "assign the issue to the currently logged-in Jira user after creating the Git branch")
	rootCmd.AddCommand(branchCommand)

	/* ----------------------
	 * Config
	 * ----------------------
	 */
	var configCommand = &cobra.Command{
		Use:   "configure",
		Short: "Configure Gira with Jira account and API token",
		Long: `
Configures the Gira CLI by setting up the Jira account credentials, including the Jira host URL, email, and API token.
This command updates the configuration file to enable communication with the Jira instance for subsequent commands like 'branch'.
Ensure you have a valid Jira API token from your Atlassian account before running this command.`,
		Aliases: []string{"config"},
		Args:    cobra.MinimumNArgs(0),
		Run: func(cmd *cobra.Command, args []string) {
			CMD.CmdConfig(configuration, logger)
		},
	}
	rootCmd.AddCommand(configCommand)

	/* ----------------------
	 * Version
	 * ----------------------
	 */
	var versionCommand = &cobra.Command{
		Use:   "version",
		Short: "Display the current Gira version and check for available updates",
		Long: `
Displays the currently installed version of the Gira CLI.
Also checks the GitHub repository to determine if a newer version is available for download, helping you stay up-to-date with the latest features and fixes.`,
		Args: cobra.MinimumNArgs(0),
		Run: func(cmd *cobra.Command, args []string) {
			CMD.CmdVersion(configuration, logger)
		},
	}
	rootCmd.AddCommand(versionCommand)

	rootCmd.Execute()
}
